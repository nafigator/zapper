# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
  pull_request_target:
    branches: [ "main" ]

env:
  GO_VERSION: '1.20.10'
  GOLANGCI_LINT_VERSION: 'v1.55.2'

jobs:
  detect-modules:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: '**/go.sum'
      - id: set-modules
        run: echo modules=$(echo $(go list -C conf -m -json; go list -C writer -m -json; go list -m -json) | jq -s '.' | jq -c '[.[].Dir]') >> $GITHUB_OUTPUT

  checks:
    name: checks
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
        go-version: [ oldstable, stable ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: 'go.sum'
          go-version: ${{ matrix.go-version }}
      - name: Run Download
        run: go mod download

      - name: Run vet
        run: CGO_ENABLED=0 go vet ./...

      - name: Run staticheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck -checks=all ./...

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -show verbose ./...

  golangci:
    name: lint
    needs: detect-modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ${{ fromJSON(needs.detect-modules.outputs.modules) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: '**/go.sum'
          go-version: ${{ env.GO_VERSION }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: ${{ env.GOLANGCI_LINT_VERSION }}

          # Optional: working directory, useful for monorepos
          # working-directory: headers
          working-directory: ${{ matrix.modules }}

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

  tests:
    name: tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.20.10', oldstable, stable ]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          cache-dependency-path: '**/go.sum'
          go-version: ${{ matrix.go-version }}

      - name: Test conf package
        run: go test -C conf -v -gcflags=-l ./... -race -coverprofile=./conf.out -covermode=atomic

      - name: Test writer package
        run: go test -C writer -v -gcflags=-l ./... -race -coverprofile=./writer.out -covermode=atomic

      - name: Test zapper package
        run: go test -v ./... -gcflags=-l -race -coverprofile=./zapper.out -covermode=atomic

      - name: Check conf package coverage
        uses: vladopajic/go-test-coverage@v2.11.2
        with:
          profile: ./conf/conf.out
          local-prefix: github.com/nafigator/zapper
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check writer package coverage
        uses: vladopajic/go-test-coverage@v2.11.2
        with:
          profile: ./writer/writer.out
          local-prefix: github.com/nafigator/zapper
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Check zapper package coverage
        uses: vladopajic/go-test-coverage@v2.11.2
        with:
          profile: ./zapper.out
          local-prefix: github.com/nafigator/zapper
          threshold-file: 100
          threshold-package: 100
          threshold-total: 100

      - name: Upload headers coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./conf/conf.out, ./writer/writer.out, ./zapper.out
          flags: unittests
          name: codecov-zapper
          verbose: false
